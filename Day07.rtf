{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset161 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs30\lang9 Python Assignment\par

\pard\sa200\sl276\slmult1\fs22 1. List Comprehensions\par
a. Write a list comprehension that generates a list of squares of the numbers from 1 to 10.\par
\b0 squares = [x**2 for x in range(1, 11)]\par
print(squares)\par
\b b. Write a list comprehension to extract all the vowels from the string "hello world".\par
\b0 vowels = [ch for ch in "hello world" if char in "aeiou"]\par
print(vowels)\par
------------------------------------------------------------------------------------------------------------------\par
\b 2. Dictionary Comprehension\par
a. Create a dictionary where the keys are numbers from 1 to 5 and the values are the cubes \par
of the keys.\par
\b0 cubeDictionary = \{x: x**3 for x in range(1, 6)\}\par
print(cube_dict)\par
\par
\b b. Create a dictionary where the keys are the \f1\lang1032\u976?irst letters of the words in the list ["apple", \par
"banana", "cherry"] and the values are the words themselves.\par
\b0\f0\lang1033 list\f1\lang1032  = ["apple", "banana", "cherry"]\par
first_letter_dict = \{\f0\lang1033 word\f1\lang1032 [0]: word for word in \f0\lang1033 list\f1\lang1032\}\par
print(first_letter_dict)\par
\f0\lang1033 -------------------------------------------------------------------------------------------------------------------\par
\b 3. Lambda Functions\par
a. Write a lambda function that adds 10 to a given number and use it to add 10 to the \par
number 5.\par
\b0 add = lambda x: x + 10\par
result = add(5)\par
print(result)\par
\b b. Write a lambda function that checks if a number is even and use it to test the number 4.\par
\b0 even_check=lambda x:x%2==0\par
result=even_check(4)\par
print(result)\par
-------------------------------------------------------------------------------------------------------------------\par
\b 4. Filter Function\par
a. Use the \f1\lang1032\u976?ilter function to \u976?ilter out the odd numbers from the list [1, 2, 3, 4, 5, 6, 7, 8, 9, \par
10].\par
\b0 numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\par
filtered_numbers = list(filter(lambda x: x % 2 == 0, numbers))\par
print(filtered_numbers)\par
\b b. Use the \u976?ilter function to remove all strings shorter than 4 characters from the list ["cat", \par
"dog", "elephant", "rat"].\par
\b0 lst= ["cat", "dog", "elephant", "rat"]\par
result=list(filter(lambda x:len(x)>4,lst))\par
print(result)\par
\f0\lang1033 -------------------------------------------------------------------------------------------------------------------\par
\b 5. Map Function\par
a. Use the map function to double all the numbers in the list [1, 2, 3, 4, 5].\par
\b0 numbers = [1, 2, 3, 4, 5]\par
doubled_numbers = list(map(lambda x: x * 2, numbers))\par
print(doubled_numbers)\par
\b b. Use the map function to convert a list of integers [1, 2, 3] to their corresponding string \par
representations.\par
\b0 lst=[1,2,3]\par
convert=list(map(lambda x:str(x),lst))\par
print(convert)\par
-------------------------------------------------------------------------------------------------------------------\par
\b 6. Reduce Function\par
a. Use the reduce function to \f1\lang1032\u976?ind the product of the numbers in the list [1, 2, 3, 4, 5].\par
\b0 from functools import reduce\par
lst=[1,2,3,4,5]\par
product=(reduce(lambda x,y:x*y,lst))\par
print(product)\par
\b b. Use the reduce function to concatenate a list of strings ["Hello", "World", "from", \par
"Python"] into a single string.\par
\b0 from functools import reduce\par
lst=["Hello", "World", "from", "Python"] \par
\f0\lang1033 concat\f1\lang1032 =(reduce(lambda x,y:x\f0\lang1033 +\f1\lang1032 y,lst))\par
print(\f0\lang1033 concat\f1\lang1032 )\par
\b\f0\lang1033 -------------------------------------------------------------------------------------------------------------------\par
7. Generator Functions\par
a. Create a generator function that yields the \f1\lang1032\u976?irst 5 even numbers.\par
\b0 def first_five_evens():\par
    num = 0\par
    count = 0\par
    while count < 5:\par
        if num % 2 == 0:\par
            yield num\par
            count += 1\par
        num += 1\par
evens = list(first_five_evens())\par
print(evens)\par
\b\f0\lang1033 b. Create a generator function that yields numbers in the Fibonacci sequence up to the \par
10th number.\par
\b0\f1\lang1032 def fibonacci_sequence():\par
    a, b = 0, 1\par
    count = 0\par
    while count < 10:\par
        yield a\par
        a, b = b, a + b\par
        count += 1\par
fibonacci = list(fibonacci_sequence())\par
print(fibonacci)\par
\f0\lang1033 -------------------------------------------------------------------------------------------------------------------\par
\b 8. Handling Exceptions\par
a. Write a function that takes two numbers and returns their division, handling the division \par
by zero exception.\par
\b0 def divide(x, y):\par
    try:\par
        result = x / y  # Division operation that may raise an exception\par
    except ZeroDivisionError as e:\par
        result=(f"Error: Division by zero! Details: \{e\}")\par
    return result\par
\b\par
b. Write a function that reads a \f1\lang1032\u976?ile and handles the \u976?ile not found exception.\par
\b0 def read_file(file_path):\par
    try:\par
        with open(file_path, 'r') as file:\par
            contents = file.read()\par
            print(f"File contents:\\n\{contents\}")\par
    except FileNotFoundError:\par
        print(f"Error: The file '\{file_path\}' was not found.")\par
file_path = 'example.txt'  # Replace with the path to your file\par
read_file(file_path)\par
\f0\lang1033 --------------------------------------------------------------------------------------------------------------\f1\lang1032\par
\par
\b 10. Regular Expressions\par
a. Use regular expressions to \f0\lang1033 f\f1\lang1032 ind all the words starting with 'a' in the string "apple and \par
banana are amazing".\par
\b0 import re\par
# Define the input string\par
input_string = "apple and banana are amazing"\par
# Use a regular expression to find words starting with 'a'\par
words_starting_with_a = re.findall(r'\\b[aA]\\w+', input_string)\par
print(words_starting_with_a)  \b\par
\par
b. Use regular expressions to extract all the email addresses from the string "contact us at \par
email@example.com or admin@site.org".\par
\b0 import re\par
# Define the input string\par
input_string = "contact us at email@example.com or admin@site.org"\par
# Regular expression pattern to match email addresses\par
email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]\{2,\}\\b'\par
# Use re.findall() to extract email addresses\par
email_addresses = re.findall(email_pattern, input_string)\par
print(email_addresses)\par
\f0\lang1033 ---------------------------------------------------------------------------------------------------------------\f1\lang1032\par
\b 11. Classes and Objects\par
a. Create a class Person with attributes name and age. Instantiate an object of this class and \par
print its attributes.\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
# Instantiate an object of the Person class\par
person1 = Person("Alice", 30)\par
# Print the attributes of the object\par
print(f"Name: \{person1.name\}")\par
print(f"Age: \{person1.age\}")\b\par
\par
b. Create a class Car with attributes make, model, and year. Instantiate an object of this \par
class and print its attributes\b0\f0\lang1033 .\par
class Car:\par
    def __init__(self, make, model, year):\par
        self.make = make\par
        self.model = model\par
        self.year = year\par
# Instantiate an object of the Car class\par
car1 = Car("Toyota", "Camry", 2022)\par
# Print the attributes of the object\par
print(f"Make: \{car1.make\}")\par
print(f"Model: \{car1.model\}")\par
print(f"Year: \{car1.year\}")\par
-------------------------------------------------------------------------------------------------------------------\par
\b\f1\lang1032 12. Inheritance\par
a. Create a class Employee that inherits from the Person class and adds an attribute salary. \par
Instantiate an object of Employee and print all its attributes.\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        super().__init__(name, age)  # Call the constructor of the parent class\par
        self.salary = salary\par
# Instantiate an object of the Employee class\par
employee1 = Employee("Alice", 30, 50000)\par
# Print all attributes (including inherited ones) of the object\par
print(f"Name: \{employee1.name\}")\par
print(f"Age: \{employee1.age\}")\par
print(f"Salary: $\{employee1.salary\}")\b\par
\par
b. Create a class Manager that inherits from Employee and adds an attribute department. \par
Instantiate an object of Manager and print all its attributes.\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
\par
class Employee(Person):\par
    def __init__(self, name, age, salary):\par
        super().__init__(name, age)\par
        self.salary = salary\par
\par
class Manager(Employee):\par
    def __init__(self, name, age, salary, department):\par
        super().__init__(name, age, salary)\par
        self.department = department\par
# Instantiate an object of the Manager class\par
manager1 = Manager("Bob", 35, 75000, "Sales")\par
# Print all attributes (including inherited ones) of the object\par
print(f"Name: \{manager1.name\}")\par
print(f"Age: \{manager1.age\}")\par
print(f"Salary: $\{manager1.salary\}")\par
print(f"Department: \{manager1.department\}")\par
\f0\lang1033 -------------------------------------------------------------------------------------------------------------------\par
\b 13. Static Methods\par
a. Add a static method to the Person class that returns a greeting message.\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    \par
    @staticmethod\par
    def greet():\par
        return "Hello! Welcome to our company."\par
# Using the static method\par
greeting_message = Person.greet()\par
print(greeting_message)  # Output: Hello! Welcome to our company.\b\par
b. Add a static method to the MathUtils class that returns the square of a given number.\par
\b0 class MathUtils:\par
    @staticmethod\par
    def square(number):\par
        return number ** 2\par
\par
# Using the static method\par
number = 5\par
square_result = MathUtils.square(number)\par
print(f"The square of \{number\} is: \{square_result\}")  # Output: The square of 5 is: 25\par
---------------------------------------------------------------------------------------------------------------\par
\b 14. Class Methods\par
a. Add a class method to the Person class that returns a new instance of Person with a \par
default name and age.\par
\b0 class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age\par
    \par
    @classmethod\par
    def create_default_person(cls):\par
        return cls("John Doe", 30)  # Default name and age\par
\par
# Using the class method\par
default_person = Person.create_default_person()\par
print(f"Default Person Name: \{default_person.name\}")\par
print(f"Default Person Age: \{default_person.age\}")\b\par
b. Add a class method to the Book class that creates a new Book instance from a given title \par
and author\f1\lang1032\par
\b0\f0\lang9 class Book:\par
    def __init__(self, title, author):\par
        self.title = title\par
        self.author = author\par
    \par
    @classmethod\par
    def create_book(cls, title, author):\par
        return cls(title, author)\par
# Using the class method\par
new_book = Book.create_book("Python Programming", "Guido van Rossum")\par
# Print the attributes of the new Book instance\par
print(f"Book Title: \{new_book.title\}")\par
print(f"Book Author: \{new_book.author\}")\par
-------------------------------------------------------------------------------------------------------------\par
\b 15. Magic Methods\par
a. Override the __str__ method in the Person class to return a formatted string.\par
\b0 a. Override the __str__ method in the Person class to return a formatted string.\par
\par
class Person:\par
    def __init__(self, name, age):\par
        self.name = name\par
        self.age = age  \par
    def __str__(self):\par
        return f"Person: \{self.name\}, Age: \{self.age\}"\par
\par
person = Person("Thomas", 30)\par
print(person)    \b\par
\par
b. Override the __add__ method in a Vector class to add two vectors together.\par
\b0 class Vector:\par
    def __init__(self, x, y):\par
        self.x = x\par
        self.y = y\par
\par
    def __add__(self, other):\par
        return Vector(self.x + other.x, self.y + other.y)\par
\par
v1 = Vector(1, 2)\par
v2 = Vector(3, 4)\par
result = v1 + v2\par
print(result.x, result.y)\par
---------------------------------------------------------------------------------------------------------------\par
\b 16. Context Managers\par
a. Create a context manager that prints "Entering" when entering the context and "Exiting" \par
when exiting the context.\par
\b0 class MyContextManager:\par
    def __enter__(self):\par
        print("Entering")\par
    \par
    def __exit__(self, exc_type, exc_val, exc_tb):\par
        print("Exiting")\par
\par
with MyContextManager():\par
    print("Inside the context")\b\par
b. Create a context manager that temporarily changes the current working directory and \par
restores it back when exiting the context\par
\b0 import os\par
\par
class ChangeDirContext:\par
    def __init__(self, new_dir):\par
        self.new_dir = new_dir\par
        self.saved_dir = None\par
\par
    def __enter__(self):\par
        self.saved_dir = os.getcwd()\par
        os.chdir(self.new_dir)\par
    \par
    def __exit__(self, exc_type, exc_val, exc_tb):\par
        os.chdir(self.saved_dir)\par
-----------------------------------------------------------------------------------------------------------------\par
\b 17. Iterators\par
a. Create a custom iterator that returns numbers from 1 to 5.\par
\b0 class MyIterator:\par
    def __init__(self):\par
        self.current = 0\par
    \par
    def __iter__(self):\par
        return self\par
    \par
    def __next__(self):\par
        self.current += 1\par
        if self.current > 5:\par
            raise StopIteration\par
        return self.current\par
\par
# Using the custom iterator\par
iterator = MyIterator()\par
for num in iterator:\par
    print(num)\b\par
\par
b. Create a custom iterator that returns the characters in a string one by one.\par
\b0 class CharIterator:\par
    def __init__(self, string):\par
        self.string = string\par
        self.index = 0\par
    \par
    def __iter__(self):\par
        return self\par
    \par
    def __next__(self):\par
        if self.index >= len(self.string):\par
            raise StopIteration\par
        char = self.string[self.index]\par
        self.index += 1\par
        return char\par
\par
# Using the custom iterator\par
my_string = "Hello"\par
char_iterator = CharIterator(my_string)\par
\par
for char in char_iterator:\par
    print(char)\par
----------------------------------------------------------------------------------------------------------------\par
\b 18. Modules and Packages\par
a. Create a simple module my_module.py with a function greet that prints "Hello, World!". \par
Import and use this function in another script.\par
\b0 Create a file named my_module.py with the following content:\par
# my_module.py\par
def greet():\par
    print("Hello, World!")\par
#Create another Python script (e.g., main.py) in the same directory as my_module.py and import the greet function:\par
# main.py\par
from my_module import greet\par
\par
# Use the greet function from my_module\par
greet()\b\par
\par
b. Create a package my_package with a module utils.py that contains a function square that \par
returns the square of a number. Import and use this function in another script.\par
\b0\par
# File: my_package/utils.py\par
def square(x):\par
    return x ** 2\par
\par
# Usage in another script:\par
# from my_package.utils import square\par
# result = square(5)\par
# print(result)\par
-------------------------------------------------------------------------------------------------------------------\par
\b 19. Date and Time\par
a. Write a program that gets the current date and time and prints it in the format "YYYY\'02MM-DD HH:MM".\par
\b0 from datetime import datetime\par
\par
# Get current date and time\par
current_datetime = datetime.now()\par
\par
# Format the date and time as "YYYY-MM-DD HH:MM"\par
formatted_datetime = current_datetime.strftime("%Y-%m-%d %H:%M")\par
\par
# Print the formatted date and time\par
print(formatted_datetime)\b\par
b. Write a program that calculates the number of days between two given dates.\par
\b0 from datetime import datetime\par
\par
def days_between_dates(date1, date2):\par
    # Convert date strings to datetime objects\par
    date_format = "%Y-%m-%d"\par
    dt1 = datetime.strptime(date1, date_format)\par
    dt2 = datetime.strptime(date2, date_format)\par
     # Calculate the difference between the two dates\par
    delta = dt2 - dt1\par
     # Return the number of days (absolute value to handle negative differences)\par
    return abs(delta.days)\par
# Example usage:\par
date1 = "2023-01-01"\par
date2 = "2023-12-31"\par
days_difference = days_between_dates(date1, date2)\par
print(f"Number of days between \{date1\} and \{date2\}: \{days_difference\} days")\par
\b ------------------------------------------------------------------------------------------------------------\par
20. Collections\par
a. Use the collections.Counter class to count the occurrences of each character in the string \par
"abracadabra".\par
\b0 from collections import Counter\par
text = "abracadabra"\par
char_count = Counter(text)\par
print(char_count)\b\par
b. Use the collections.defaultdict class to create a dictionary that returns a default value of \par
0 for any new keys.\par
\b0 from collections import defaultdict\par
default_dictionary = defaultdict(int)\par
default_dictionary['a'] = 1\par
print(default_dictionary['a'])  \par
print(default_dictionary['b']) \b\par
}
 